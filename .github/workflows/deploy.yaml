name: Reusable deployment workflow
on:
  workflow_call:
    inputs:
      app_name:
        description: >
          The name of the application to deploy.

          Controls where in the `socotra-release` repo to write the application
          manifest.

          Example: "frontend-v2", "loadassets2", etc.
        required: true
        type: string

      environment:
        description: >
          A space-separated list of environment(s) to which the application
          shall be deployed.

          Controls which overlay to use for building the manifest, and where in
          the `socotra-release` repo to write the rendered manifest.

          This can be a space-separated list of multiple environments.

          Examples:
            * "develop"
            * "staging"
            * "axa-production moo-production toni-production ..."
        required: true
        type: string

      image_name:
        description: >
          The generic name of the container image specified in the application's
          base manifests.

          Examples:
            * "socotra/frontend-v2"
            * "socotra/loadassets2"
        required: true
        type: string

      image_tag:
        description: The container image tag to use for the above image.
        required: true
        type: string

      branch:
        description: >
          The branch of the `soctora-release` repo in which to write the new
          manifest(s).

          By default, this is 'master', so the new manifest(s) will get picked
          up by our deployment system. Keep in mind, though, that production
          environments' applications won't auto-sync, but require further
          approval within ArgoCD.

          If this parameter is anything but 'master', then the manifest(s) will
          be written to a new or existing branch, and a PR will be opened for
          merging it back into the master branch.
        required: false
        type: string
        default: master
    secrets:
      our_github_token:
        description: >
          We need a specific token to check out the socotra-release repo, since
          the default GITHUB_TOKEN does not have the appropriate permissions.
        required: true

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Checkout socotra-release
      uses: actions/checkout@v3
      with:
        repository: socotra/socotra-release
        token: ${{ secrets.our_github_token }}
        path: /home/runner/work/${{ inputs.app_name }}/${{ inputs.app_name }}/socotra-release
        ref: master
        fetch-depth: 0
    - name: Setup
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update -y
        sudo apt-get install -y apt-transport-https ca-certificates curl
        sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
        echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update -y
        sudo apt-get install -y kubectl
    - name: Render manifest(s)
      run: |
        set -ex
        i=0
        # render manifests for all envs concurrently
        for env in ${{ inputs.environment }}; do
          INPUT_OVERLAY="./kustomize/overlays/${env}"
          cat >>${INPUT_OVERLAY}/kustomization.yaml <<EOF
        images:
        EOF
          for image in ${{ inputs.image_name }}; do
            cat >>${INPUT_OVERLAY}/kustomization.yaml <<EOF
        - name: ${image}
          newName: 936926373655.dkr.ecr.us-west-2.amazonaws.com/${image}
          newTag: ${{ inputs.image_tag }}
        EOF
          done
          OUTPUT_DIR="/home/runner/work/${{ inputs.app_name }}/${{ inputs.app_name }}/socotra-release/environments/${env}/${{ inputs.app_name }}"
          ERRORS_DIR="/home/runner/work/errors/${env}"
          mkdir -p ${OUTPUT_DIR} ${ERRORS_DIR}
          kubectl kustomize ${INPUT_OVERLAY} \
            > ${OUTPUT_DIR}/manifest.yaml \
            2> ${ERRORS_DIR}/errors.log \
            &
          pids[${i}]=$!
          envs[${i}]=${env}
          let "i+=1"
        done
        # check exit codes for each render job
        FAILED=0
        for job in "${!pids[@]}"; do
          if ! wait "${pids[$job]}"; then
            FAILED=1
            echo "ERROR: failed to render for env ${envs[$job]}"
            cat /home/runner/work/errors/${envs[$job]}/errors.log
            echo
          fi
        done
        exit ${FAILED}

    # TODO: figure out strategy for fetching and deploying secrets.
    # There is an official set of Vault actions from Hashicorp. It would be
    # nice to do this in a completely generic way, so that this workflow could
    # be reused commonly among multiple services.
    - name: Publish manifest
      run: |
        set -ex
        cd /home/runner/work/${{ inputs.app_name }}/${{ inputs.app_name }}/socotra-release
        git config --global user.name "Socotra DevOps"
        git config --global user.email devops@socotra.com
        git config --global push.default current
        git add .
        # if non-'master' branch, let the peter-evans/create-pull-request action
        # manage commit & push
        [[ "${{ inputs.branch }}" != "master" ]] && exit 0
        git commit -a -m "Deploy ${{ inputs.app_name }} with tag ${{ inputs.image_tag }}."
        while ! git push; do
          git pull --rebase
        done

    - name: Create Pull Request
      if: inputs.branch != 'master'
      uses: peter-evans/create-pull-request@v4
      with:
        path: /home/runner/work/${{ inputs.app_name }}/${{ inputs.app_name }}/socotra-release
        token: ${{ secrets.our_github_token }}
        branch: ${{ inputs.branch }}
        delete-branch: true
        base: master
        title: "Deploy ${{ inputs.app_name }} with tag ${{ inputs.image_tag }}"
        commit-message: |
          Deploy ${{ inputs.app_name }} with tag ${{ inputs.image_tag }}

          Generated by:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        author: "Socotra DevOps <devops@socotra.com>"
        team-reviewers: devops
        body: |2
           | App | Tag | Run URL |
           | --- | --- | --- |
           | ${{ inputs.app_name }} | ${{ inputs.image_tag }} | ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} |
